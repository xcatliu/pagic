import projectConfig from '/pagic.config.js';
import Ga from '/_ga.js';
var _a, _b;
export default {
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['zh-CN'], branch: 'master' },
    'pagePath': "zh-CN/blog/design_pagic_config_ts.md",
    'layoutPath': "blog/_layout.tsx",
    'outputPath': "zh-CN/blog/design_pagic_config_ts.html",
    'title': "设计 pagic.config.ts",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>设计 pagic.config.ts</h1>\n<blockquote>\n<p>本文部分内容可能已经过时，访问<a href="../docs/config.html">配置文件</a>查看最新的配置字段。</p>\n</blockquote>\n<p>作为一名<del>高级 Markdown 工程师</del>资深博客爱好者，我热衷于<del>写博客</del>折腾各种博客系统，写过多个博客主题。</p>\n<p>终于，写主题也无法得到满足，我开始写博客系统了。</p>\n<p>或者说是更广义的，静态网站生成器。</p>\n<p>如今 <a href="https://github.com/xcatliu/pagic">Pagic</a> 已经完成了一个雏形，我也邀请了一些朋友试用，经过一些迭代，我决定来重新设计一下 <code>pagic.config.ts</code>，毕竟作为一个静态网站生成器，大部分用户只需要配置一下 <code>pagic.config.ts</code> 就可以构建网站了，所以配置文件的设计是至关重要的。</p>\n<h2 id="%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">设计原则<a class="anchor" href="#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§</a></h2>\n<ol>\n<li><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE">约定优于配置</a></li>\n<li>尽可能语义话，一目了然</li>\n<li>类型统一，不要有选项既能传字符串又能传函数</li>\n<li>参考：<a href="https://deno.land/manual/contributing/style_guide">Deno</a>, <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">tsconfig.json</a>, <a href="https://webpack.js.org/configuration/">webpack</a>, <a href="https://hexo.io/zh-cn/docs/configuration">Hexo</a>, <a href="https://vuepress.vuejs.org/config/">VuePress</a>, <a href="https://gohugo.io/getting-started/configuration/">Hugo</a></li>\n</ol>\n<h2 id="%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">命名约定<a class="anchor" href="#%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">§</a></h2>\n<h3 id="%E6%96%87%E4%BB%B6%E5%90%8D%E7%9B%AE%E5%BD%95%E5%90%8D">文件名、目录名<a class="anchor" href="#%E6%96%87%E4%BB%B6%E5%90%8D%E7%9B%AE%E5%BD%95%E5%90%8D">§</a></h3>\n<p>使用下划线命名法 <code>foo_bar/baz_v2.md</code>。</p>\n<p>依据：<a href="https://deno.land/manual/contributing/style_guide#use-underscores-not-dashes-in-filenames">Deno 的建议</a></p>\n<h3 id="%E5%8F%98%E9%87%8F%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D">变量名、参数名<a class="anchor" href="#%E5%8F%98%E9%87%8F%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D">§</a></h3>\n<p>使用驼峰命名法 <code>fooBar</code>。</p>\n<p>依据：<a href="https://deno.land/manual/contributing/style_guide#exported-functions-max-2-args-put-the-rest-into-an-options-object">Deno 的实际做法</a></p>\n<h3 id="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">配置文件名称<a class="anchor" href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">§</a></h3>\n<p><code>pagic.config.tsx</code> 或 <code>pagic.config.ts</code>。</p>\n<ul>\n<li>其中 <code>pagic.config.tsx</code> 优先级更高（依据：<a href="https://webpack.js.org/configuration/resolve/#resolveextensions">webpack 的默认加载顺序</a>）</li>\n<li>为什么要提供 <code>tsx</code> 和 <code>ts</code> 两种？为什么不统一为 <code>ts</code>？因为一旦使用了 jsx 语法，则必须命名为 <code>tsx</code>，这是 TypeScript 的限制</li>\n<li>为什么不统一为 <code>tsx</code>？因为大部分情况下用 <code>ts</code> 足够了</li>\n<li>只查找当前运行目录下的配置文件，<strong>不提供</strong> <code>--config</code> 的方式指定配置文件（约定优于配置）</li>\n<li><code>json</code> 格式和 <code>yaml</code> 格式有诸多限制，故使用 <code>ts</code> 来书写配置文件，<strong>不提供</strong>其他选择（约定优于配置）</li>\n<li>其他静态网站生成器的配置文件中，最让人困惑的就是将主题的配置单独抽离出来了，使得我经常需要犹豫，一个配置项到底是属于主配置文件还是属于主题的配置文件。所以，在 Pagic 中只存在一个配置文件</li>\n</ul>\n<p>命名依据：</p>\n<ul>\n<li><code>tsconfig.json</code>（ts）</li>\n<li><code>webpack.config.js</code>（webpack）</li>\n<li><code>.vuepress/config.js</code>（VuePress）</li>\n<li><code>_config.yml</code>（Hexo）</li>\n<li><code>config.json</code>（Hugo）</li>\n</ul>\n<h2 id="%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE">文件相关的配置<a class="anchor" href="#%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>文件相关的配置大多参考的 <code>tsconfig.json</code>。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>srcDir</code></td>\n<td><code>string</code></td>\n<td><code>\'.\'</code></td>\n<td>构建的源目录。其中的页面都会以相同的目录结构被构建到 <code>outDir</code> 中。默认为当前目录，此时当前目录下的 <code>README.md</code> 会被构建到 <code>${outDir}/index.html</code> 中</td>\n</tr>\n<tr>\n<td><code>outDir</code></td>\n<td><code>string</code></td>\n<td><code>\'dist\'</code></td>\n<td>构建的目标目录</td>\n</tr>\n<tr>\n<td><code>include</code></td>\n<td><code>glob[]</code></td>\n<td><code>undefined</code></td>\n<td><code>include</code> 限制了 <code>srcDir</code> 中会被扫描到的文件。它常用于当 <code>srcDir</code> 配置为 <code>.</code> 时，指定部分文件或目录。glob 语法<a href="https://github.com/isaacs/minimatch">见此</a></td>\n</tr>\n<tr>\n<td><code>exclude</code></td>\n<td><code>glob[]</code></td>\n<td>较长，后续详细介绍</td>\n<td><code>exclude</code> 与 <code>include</code> 类似，用于在 <code>srcDir</code> 中排除指定的文件</td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td><code>string</code></td>\n<td><code>\'/\'</code></td>\n<td>部署站点的基础路径，如果网站部署在一个子路径下，比如 <code>https://xcatliu.github.io/pagic/</code>，那么 <code>root</code> 应该被设置为 <code>\'/pagic/\'</code></td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="exclude"><code>exclude</code><a class="anchor" href="#exclude">§</a></h3>\n<p><code>exclude</code> 的默认值较长：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token punctuation">[</span>\n  <span class="token comment">// Dot files</span>\n  <span class="token string">\'**/.*\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// Node common files</span>\n  <span class="token string">\'**/package.json\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/package-lock.json\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/node_modules\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'pagic.config.ts\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'pagic.config.tsx\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// <a class="token url-link" href="https://docs.npmjs.com/using-npm/developers.html#keeping-files-out-of-your-package">https://docs.npmjs.com/using-npm/developers.html#keeping-files-out-of-your-package</a></span>\n  <span class="token string">\'**/config.gypi\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/CVS\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/npm-debug.log\'</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// ${config.outDir} will be added later</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意这里的每一项都可以匹配到文件或目录，以 <code>**/node_modules</code> 为例，它：</p>\n<ul>\n<li>不仅能匹配到 <code>${srcDir}</code> 下的 <code>node_modules</code> 目录（以及此目录下的所有文件）</li>\n<li>也能匹配到 <code>${srcDir}</code> 下的 <code>node_modules</code> 文件</li>\n<li>当然也能匹配到 <code>${srcDir}</code> 下的任意多级子目录下的 <code>node_modules</code> 目录或文件</li>\n</ul>\n<p>实际上，<code>**/node_modules</code> 会被转化为 <code>**/node_modules{,/**}</code>，这样就能匹配到以上所有情况了。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>匹配时以 <code>srcDir</code> 为根目录开始匹配。比如 <code>pagic.config.{ts,tsx}</code> 就只能匹配到 <code>srcDir</code> 下的文件，而不能匹配到 <code>srcDir</code> 的子目录下的文件，若要匹配上子目录，需要加上前缀 <code>*/</code>，若要匹配上任意多级子目录，需要加上前缀 <code>**/</code></li>\n<li><code>include</code> 的匹配策略和 <code>exclude</code> 一致</li>\n<li>用户配置的 <code>exclude</code> 会 append 到 Default 数组中，而不是替换它</li>\n</ul>\n<p>通过这些配置，Pagic 可以灵活的运用于各种场景：</p>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%B8%80%E7%BA%AF%E7%BD%91%E7%AB%99%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">场景一：纯网站，独立的目录存放源文件<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%B8%80%E7%BA%AF%E7%BD%91%E7%AB%99%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">§</a></h3>\n<p>如果仅仅是想搭建一个网站，那么最方便的方式是使用这样的目录结构，将源文件与构建好的文件分开：</p>\n<pre class="language-bash"><code class="language-bash">website/\n├── dist/\n<span class="token operator">|</span>   └── index.html\n├── src/\n<span class="token operator">|</span>   ├── _layout.tsx\n<span class="token operator">|</span>   └── README.md\n└── pagic.config.ts\n</code></pre>\n<p>此时 <code>pagic.config.ts</code> 的配置很简单：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%BA%8C%E7%BA%AF%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">场景二：纯网站，根目录存放源文件<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%BA%8C%E7%BA%AF%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">§</a></h3>\n<p>项目的根目录下一般都有个 <code>README.md</code>，有时我们希望这个文件也被构建为一个页面，此时我们可以将 <code>srcDir</code> 设置为 <code>\'.\'</code>，比如参考 GitBook 的目录结构组织的话，就是这样的：</p>\n<pre class="language-bash"><code class="language-bash">book/\n├── dist/\n<span class="token operator">|</span>   ├── basics/\n<span class="token operator">|</span>   <span class="token operator">|</span>   └── index.html\n<span class="token operator">|</span>   ├── advenced/\n<span class="token operator">|</span>   <span class="token operator">|</span>   └── index.html\n<span class="token operator">|</span>   └── index.html\n├── basics/\n<span class="token operator">|</span>   └── README.md\n├── advenced/\n<span class="token operator">|</span>   └── README.md\n├── _layout.tsx\n├── README.md\n└── pagic.config.ts\n</code></pre>\n<p>此时 <code>pagic.config.ts</code> 的配置也很简单：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意如果有需要排除的文件，可以使用 <code>exclude</code> 排除掉，比如：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n  exclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'examples\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%B8%89%E9%A1%B9%E7%9B%AE--%E7%BD%91%E7%AB%99">场景三：项目 + 网站<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%B8%89%E9%A1%B9%E7%9B%AE--%E7%BD%91%E7%AB%99">§</a></h3>\n<p>如果是在一个项目中要搭建网站，又不想重新建一个仓库，那么前两种方式都可以满足需求：</p>\n<ol>\n<li>网站源文件放到 <code>docs</code> 目录下，<code>srcDir</code> 配置为 <code>\'docs\'</code> 即可。优点是配置简单，不用配置 <code>include</code> 和 <code>exclude</code></li>\n<li>直接在根目录下构建网站，<code>srcDir</code> 配置为 <code>\'.\'</code>，再配置 <code>include</code> 包含网站的存放目录即可。优点是包含了根目录下的 <code>README.md</code></li>\n</ol>\n<h3 id="%E5%9C%BA%E6%99%AF%E5%9B%9B%E4%BB%85%E5%B1%95%E7%A4%BA-readmemd">场景四：仅展示 <a href="http://README.md">README.md</a><a class="anchor" href="#%E5%9C%BA%E6%99%AF%E5%9B%9B%E4%BB%85%E5%B1%95%E7%A4%BA-readmemd">§</a></h3>\n<p>有的项目很简单，只需要一个 <code>README.md</code> 即可，不需要其他页面了，此时可以配置 <code>include</code> 仅包含 <code>README.md</code>：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n  include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'README.md\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E6%8F%92%E4%BB%B6">插件<a class="anchor" href="#%E6%8F%92%E4%BB%B6">§</a></h2>\n<p>插件是 Pagic 中最核心的功能，Pagic 甚至将最基本的构建流程也拆分为了插件——内置插件。插件分为三种：</p>\n<ol>\n<li>内置插件：最基本的构建流程，一定会运行</li>\n<li>官方插件：由 Pagic 实现的插件，可选，如：<code>sidebar</code>，<code>ga</code> 等</li>\n<li>第三方插件：由第三方实现的插件，可选。遵循 Deno 的设计，入口为一个 url，如：<code>https://github.com/xcatliu/pagic_plugin_example/blob/master/mod.ts</code></li>\n</ol>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>plugins</code></td>\n<td><code>string[]</code></td>\n<td><code>[\'clean\', \'init\', \'md\', \'tsx\', \'script\', \'layout\', \'out\']</code></td>\n<td>插件列表，内置插件和官方插件的取值均为插件名，第三方插件的取值为其入口 url</td>\n</tr>\n</tbody>\n</table></div>\n<p>插件执行的顺序按照其配置顺序，除非该插件在实现时配置了一个 <code>insert</code> 属性：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'customPlugin\'</span><span class="token punctuation">,</span>\n  insert<span class="token operator">:</span> <span class="token string">\'before:script\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// fn 的设计参考了 Deno <a class="token url-link" href="https://deno.land/manual/testing#writing-tests">https://deno.land/manual/testing#writing-tests</a></span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// balabala</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>name</code> 是插件的唯一标识，会被用于 <code>insert</code> 中的插件排序。</p>\n<p><code>insert</code> 的语法是 <code>before:${pluginName}</code> 或 <code>after:${pluginName}</code>。这种方式比其他静态网站生成器中需要注册各种各样的生命周期钩子更方便也更灵活。</p>\n<p><code>fn</code> 是一个函数，仅接受一个参数，<code>pagic</code> 实例，它可以访问到 Pagic 在运行中的所有配置、上下文。如果插件需要一些额外的配置，可以约定在 <code>pagic.config.ts</code> 中新增一条配置项 <code>customPlugin</code>，然后在 <code>fn</code> 中可以通过 <code>pagic.config.customPlugin</code> 获取到配置。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>用户配置的 <code>plugins</code> 会 append 到默认数组中，而不是替换它</li>\n<li>插件在运行时会根据其 <code>insert</code> 排序再运行</li>\n<li>可以使用 <code>-</code> 前缀删除掉某个内置插件，这个特性不常用，只有在以下两种情况下需要使用：\n<ol>\n<li>仅仅将 React 作为一个模版引擎，想构建出不加载 React 的 html 页面时，可以使用 <code>-script</code> 去掉构建 js 脚本的插件，注意此时 React 中的脚本比如 <code>useState</code> 就不会在客户端执行了</li>\n<li>想要自己替换掉一些内置插件，比如使用 <code>-md</code> 去掉解析 markdown 文件的插件，然后再添加一个自定义插件 <code>https://github.com/xcatliu/pagic_plugin_custom_md/blob/master/mod.ts</code> 这样可以修改 Pagic 核心的构建流程，实现更高自由度的个性化</li>\n</ol>\n</li>\n<li>第三方插件一般都需要 <code>insert</code> 属性，不然就会在 <code>write</code> 之后运行了，很少有插件需要在构建完成写入文件后再执行</li>\n</ul>\n<h2 id="%E4%B8%BB%E9%A2%98">主题<a class="anchor" href="#%E4%B8%BB%E9%A2%98">§</a></h2>\n<p>主题是 Pagic 中的核心功能之一，有官方主题和第三方主题两种</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>theme</code></td>\n<td><code>string</code></td>\n<td><code>default</code></td>\n<td>官方主题的取值为主题名，第三方插件的取值为其入口 url</td>\n</tr>\n</tbody>\n</table></div>\n<p>主题的运行机制很容易理解——当运行 <code>pagic build</code> 时，会将主题中的所有文件都「复制」到 <code>srcDir</code> 下，然后按照正常的模式运行 <code>build</code>。</p>\n<p>当然，这个「复制」并不会真的复制文件。而且遇到冲突的文件时，也是以用户的文件为准。</p>\n<p>为什么主题需要一个入口文件呢？</p>\n<p>因为 Deno 的设计中，模块调用是以 url 为基础的，想象一个网址表示一个主题，我们没有办法像 node 一样用 <code>fs.readdir</code> 来找到此主题目录下的所有文件，所以必须有一个入口文件来表示此主题包含了哪些文件：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'assets/index.css\'</span><span class="token punctuation">,</span> <span class="token string">\'assets/reset.css\'</span><span class="token punctuation">,</span> <span class="token string">\'assets/variables.css\'</span><span class="token punctuation">,</span> <span class="token string">\'_layout.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'favicon.ico\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>其中 <code>files</code> 表示需要被「复制」到 <code>srcDir</code> 下的文件。</p>\n<h2 id="%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE">网站配置<a class="anchor" href="#%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>这里列出一些约定好的配置，它们通常由插件或主题来实现。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站标题，通常会放到页面的标题后面，如：<code>函数的类型 · TypeScript 入门教程</code>，若该页面不存在页面标题，则只会展示网站标题 <code>TypeScript 入门教程</code></td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站描述，通常会放到 <code>&lt;head&gt;&lt;meta name=&quot;description&quot;&gt;</code> 中展示，也有可能展示在页面中</td>\n</tr>\n<tr>\n<td><code>head</code></td>\n<td><code>ReactElement</code></td>\n<td><code>undefined</code></td>\n<td>额外被注入到 <code>&lt;head&gt;</code> 中的内容，可以写 jsx。注意此时需要将配置文件 <code>pagic.config.tsx</code></td>\n</tr>\n<tr>\n<td><code>sidebar</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>侧边栏</td>\n</tr>\n<tr>\n<td><code>nav</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>顶部导航</td>\n</tr>\n<tr>\n<td><code>github</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站的 GitHub 地址，通常会展示在网页的右上角</td>\n</tr>\n<tr>\n<td><code>ga</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>Google Analytics 配置</td>\n</tr>\n<tr>\n<td><code>gitalk</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>Gitalk 配置</td>\n</tr>\n<tr>\n<td><code>tocAd</code></td>\n<td><code>ReactElement</code></td>\n<td><code>undefined</code></td>\n<td>展示在 toc 上方的广告</td>\n</tr>\n<tr>\n<td><code>tools</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>一些额外的功能</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">开发环境配置<a class="anchor" href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">§</a></h2>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>watch</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>是否观察 <code>srcDir</code> 目录，有变化后重新构建</td>\n</tr>\n<tr>\n<td><code>serve</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>是否启动一个静态服务</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td><code>number</code></td>\n<td><code>8000</code></td>\n<td>静态服务端口号</td>\n</tr>\n</tbody>\n</table></div>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-45256157-16" }),
        React.createElement(React.Fragment, { key: ".1" },
            React.createElement(React.Fragment, { key: ".0" },
                React.createElement("script", { src: "/i18n.js", type: "module" })),
            React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" }))),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'language': {
        "code": "zh-CN",
        "name": "简体中文",
        "root": "/zh-CN/"
    },
    'contentTitle': React.createElement("h1", { key: "0" }, "\u8BBE\u8BA1 pagic.config.ts"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>本文部分内容可能已经过时，访问<a href="../docs/config.html">配置文件</a>查看最新的配置字段。</p>\n</blockquote>\n<p>作为一名<del>高级 Markdown 工程师</del>资深博客爱好者，我热衷于<del>写博客</del>折腾各种博客系统，写过多个博客主题。</p>\n<p>终于，写主题也无法得到满足，我开始写博客系统了。</p>\n<p>或者说是更广义的，静态网站生成器。</p>\n<p>如今 <a href="https://github.com/xcatliu/pagic">Pagic</a> 已经完成了一个雏形，我也邀请了一些朋友试用，经过一些迭代，我决定来重新设计一下 <code>pagic.config.ts</code>，毕竟作为一个静态网站生成器，大部分用户只需要配置一下 <code>pagic.config.ts</code> 就可以构建网站了，所以配置文件的设计是至关重要的。</p>\n<h2 id="%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">设计原则<a class="anchor" href="#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99">§</a></h2>\n<ol>\n<li><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE">约定优于配置</a></li>\n<li>尽可能语义话，一目了然</li>\n<li>类型统一，不要有选项既能传字符串又能传函数</li>\n<li>参考：<a href="https://deno.land/manual/contributing/style_guide">Deno</a>, <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">tsconfig.json</a>, <a href="https://webpack.js.org/configuration/">webpack</a>, <a href="https://hexo.io/zh-cn/docs/configuration">Hexo</a>, <a href="https://vuepress.vuejs.org/config/">VuePress</a>, <a href="https://gohugo.io/getting-started/configuration/">Hugo</a></li>\n</ol>\n<h2 id="%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">命名约定<a class="anchor" href="#%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A">§</a></h2>\n<h3 id="%E6%96%87%E4%BB%B6%E5%90%8D%E7%9B%AE%E5%BD%95%E5%90%8D">文件名、目录名<a class="anchor" href="#%E6%96%87%E4%BB%B6%E5%90%8D%E7%9B%AE%E5%BD%95%E5%90%8D">§</a></h3>\n<p>使用下划线命名法 <code>foo_bar/baz_v2.md</code>。</p>\n<p>依据：<a href="https://deno.land/manual/contributing/style_guide#use-underscores-not-dashes-in-filenames">Deno 的建议</a></p>\n<h3 id="%E5%8F%98%E9%87%8F%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D">变量名、参数名<a class="anchor" href="#%E5%8F%98%E9%87%8F%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D">§</a></h3>\n<p>使用驼峰命名法 <code>fooBar</code>。</p>\n<p>依据：<a href="https://deno.land/manual/contributing/style_guide#exported-functions-max-2-args-put-the-rest-into-an-options-object">Deno 的实际做法</a></p>\n<h3 id="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">配置文件名称<a class="anchor" href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">§</a></h3>\n<p><code>pagic.config.tsx</code> 或 <code>pagic.config.ts</code>。</p>\n<ul>\n<li>其中 <code>pagic.config.tsx</code> 优先级更高（依据：<a href="https://webpack.js.org/configuration/resolve/#resolveextensions">webpack 的默认加载顺序</a>）</li>\n<li>为什么要提供 <code>tsx</code> 和 <code>ts</code> 两种？为什么不统一为 <code>ts</code>？因为一旦使用了 jsx 语法，则必须命名为 <code>tsx</code>，这是 TypeScript 的限制</li>\n<li>为什么不统一为 <code>tsx</code>？因为大部分情况下用 <code>ts</code> 足够了</li>\n<li>只查找当前运行目录下的配置文件，<strong>不提供</strong> <code>--config</code> 的方式指定配置文件（约定优于配置）</li>\n<li><code>json</code> 格式和 <code>yaml</code> 格式有诸多限制，故使用 <code>ts</code> 来书写配置文件，<strong>不提供</strong>其他选择（约定优于配置）</li>\n<li>其他静态网站生成器的配置文件中，最让人困惑的就是将主题的配置单独抽离出来了，使得我经常需要犹豫，一个配置项到底是属于主配置文件还是属于主题的配置文件。所以，在 Pagic 中只存在一个配置文件</li>\n</ul>\n<p>命名依据：</p>\n<ul>\n<li><code>tsconfig.json</code>（ts）</li>\n<li><code>webpack.config.js</code>（webpack）</li>\n<li><code>.vuepress/config.js</code>（VuePress）</li>\n<li><code>_config.yml</code>（Hexo）</li>\n<li><code>config.json</code>（Hugo）</li>\n</ul>\n<h2 id="%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE">文件相关的配置<a class="anchor" href="#%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>文件相关的配置大多参考的 <code>tsconfig.json</code>。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>srcDir</code></td>\n<td><code>string</code></td>\n<td><code>\'.\'</code></td>\n<td>构建的源目录。其中的页面都会以相同的目录结构被构建到 <code>outDir</code> 中。默认为当前目录，此时当前目录下的 <code>README.md</code> 会被构建到 <code>${outDir}/index.html</code> 中</td>\n</tr>\n<tr>\n<td><code>outDir</code></td>\n<td><code>string</code></td>\n<td><code>\'dist\'</code></td>\n<td>构建的目标目录</td>\n</tr>\n<tr>\n<td><code>include</code></td>\n<td><code>glob[]</code></td>\n<td><code>undefined</code></td>\n<td><code>include</code> 限制了 <code>srcDir</code> 中会被扫描到的文件。它常用于当 <code>srcDir</code> 配置为 <code>.</code> 时，指定部分文件或目录。glob 语法<a href="https://github.com/isaacs/minimatch">见此</a></td>\n</tr>\n<tr>\n<td><code>exclude</code></td>\n<td><code>glob[]</code></td>\n<td>较长，后续详细介绍</td>\n<td><code>exclude</code> 与 <code>include</code> 类似，用于在 <code>srcDir</code> 中排除指定的文件</td>\n</tr>\n<tr>\n<td><code>root</code></td>\n<td><code>string</code></td>\n<td><code>\'/\'</code></td>\n<td>部署站点的基础路径，如果网站部署在一个子路径下，比如 <code>https://xcatliu.github.io/pagic/</code>，那么 <code>root</code> 应该被设置为 <code>\'/pagic/\'</code></td>\n</tr>\n</tbody>\n</table></div>\n<h3 id="exclude"><code>exclude</code><a class="anchor" href="#exclude">§</a></h3>\n<p><code>exclude</code> 的默认值较长：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token punctuation">[</span>\n  <span class="token comment">// Dot files</span>\n  <span class="token string">\'**/.*\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// Node common files</span>\n  <span class="token string">\'**/package.json\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/package-lock.json\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/node_modules\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'pagic.config.ts\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'pagic.config.tsx\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// <a class="token url-link" href="https://docs.npmjs.com/using-npm/developers.html#keeping-files-out-of-your-package">https://docs.npmjs.com/using-npm/developers.html#keeping-files-out-of-your-package</a></span>\n  <span class="token string">\'**/config.gypi\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/CVS\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'**/npm-debug.log\'</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// ${config.outDir} will be added later</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意这里的每一项都可以匹配到文件或目录，以 <code>**/node_modules</code> 为例，它：</p>\n<ul>\n<li>不仅能匹配到 <code>${srcDir}</code> 下的 <code>node_modules</code> 目录（以及此目录下的所有文件）</li>\n<li>也能匹配到 <code>${srcDir}</code> 下的 <code>node_modules</code> 文件</li>\n<li>当然也能匹配到 <code>${srcDir}</code> 下的任意多级子目录下的 <code>node_modules</code> 目录或文件</li>\n</ul>\n<p>实际上，<code>**/node_modules</code> 会被转化为 <code>**/node_modules{,/**}</code>，这样就能匹配到以上所有情况了。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>匹配时以 <code>srcDir</code> 为根目录开始匹配。比如 <code>pagic.config.{ts,tsx}</code> 就只能匹配到 <code>srcDir</code> 下的文件，而不能匹配到 <code>srcDir</code> 的子目录下的文件，若要匹配上子目录，需要加上前缀 <code>*/</code>，若要匹配上任意多级子目录，需要加上前缀 <code>**/</code></li>\n<li><code>include</code> 的匹配策略和 <code>exclude</code> 一致</li>\n<li>用户配置的 <code>exclude</code> 会 append 到 Default 数组中，而不是替换它</li>\n</ul>\n<p>通过这些配置，Pagic 可以灵活的运用于各种场景：</p>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%B8%80%E7%BA%AF%E7%BD%91%E7%AB%99%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">场景一：纯网站，独立的目录存放源文件<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%B8%80%E7%BA%AF%E7%BD%91%E7%AB%99%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">§</a></h3>\n<p>如果仅仅是想搭建一个网站，那么最方便的方式是使用这样的目录结构，将源文件与构建好的文件分开：</p>\n<pre class="language-bash"><code class="language-bash">website/\n├── dist/\n<span class="token operator">|</span>   └── index.html\n├── src/\n<span class="token operator">|</span>   ├── _layout.tsx\n<span class="token operator">|</span>   └── README.md\n└── pagic.config.ts\n</code></pre>\n<p>此时 <code>pagic.config.ts</code> 的配置很简单：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%BA%8C%E7%BA%AF%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">场景二：纯网站，根目录存放源文件<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%BA%8C%E7%BA%AF%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6">§</a></h3>\n<p>项目的根目录下一般都有个 <code>README.md</code>，有时我们希望这个文件也被构建为一个页面，此时我们可以将 <code>srcDir</code> 设置为 <code>\'.\'</code>，比如参考 GitBook 的目录结构组织的话，就是这样的：</p>\n<pre class="language-bash"><code class="language-bash">book/\n├── dist/\n<span class="token operator">|</span>   ├── basics/\n<span class="token operator">|</span>   <span class="token operator">|</span>   └── index.html\n<span class="token operator">|</span>   ├── advenced/\n<span class="token operator">|</span>   <span class="token operator">|</span>   └── index.html\n<span class="token operator">|</span>   └── index.html\n├── basics/\n<span class="token operator">|</span>   └── README.md\n├── advenced/\n<span class="token operator">|</span>   └── README.md\n├── _layout.tsx\n├── README.md\n└── pagic.config.ts\n</code></pre>\n<p>此时 <code>pagic.config.ts</code> 的配置也很简单：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>注意如果有需要排除的文件，可以使用 <code>exclude</code> 排除掉，比如：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n  exclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'examples\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="%E5%9C%BA%E6%99%AF%E4%B8%89%E9%A1%B9%E7%9B%AE--%E7%BD%91%E7%AB%99">场景三：项目 + 网站<a class="anchor" href="#%E5%9C%BA%E6%99%AF%E4%B8%89%E9%A1%B9%E7%9B%AE--%E7%BD%91%E7%AB%99">§</a></h3>\n<p>如果是在一个项目中要搭建网站，又不想重新建一个仓库，那么前两种方式都可以满足需求：</p>\n<ol>\n<li>网站源文件放到 <code>docs</code> 目录下，<code>srcDir</code> 配置为 <code>\'docs\'</code> 即可。优点是配置简单，不用配置 <code>include</code> 和 <code>exclude</code></li>\n<li>直接在根目录下构建网站，<code>srcDir</code> 配置为 <code>\'.\'</code>，再配置 <code>include</code> 包含网站的存放目录即可。优点是包含了根目录下的 <code>README.md</code></li>\n</ol>\n<h3 id="%E5%9C%BA%E6%99%AF%E5%9B%9B%E4%BB%85%E5%B1%95%E7%A4%BA-readmemd">场景四：仅展示 <a href="http://README.md">README.md</a><a class="anchor" href="#%E5%9C%BA%E6%99%AF%E5%9B%9B%E4%BB%85%E5%B1%95%E7%A4%BA-readmemd">§</a></h3>\n<p>有的项目很简单，只需要一个 <code>README.md</code> 即可，不需要其他页面了，此时可以配置 <code>include</code> 仅包含 <code>README.md</code>：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  srcDir<span class="token operator">:</span> <span class="token string">\'.\'</span><span class="token punctuation">,</span>\n  outDir<span class="token operator">:</span> <span class="token string">\'dist\'</span><span class="token punctuation">,</span>\n  include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'README.md\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E6%8F%92%E4%BB%B6">插件<a class="anchor" href="#%E6%8F%92%E4%BB%B6">§</a></h2>\n<p>插件是 Pagic 中最核心的功能，Pagic 甚至将最基本的构建流程也拆分为了插件——内置插件。插件分为三种：</p>\n<ol>\n<li>内置插件：最基本的构建流程，一定会运行</li>\n<li>官方插件：由 Pagic 实现的插件，可选，如：<code>sidebar</code>，<code>ga</code> 等</li>\n<li>第三方插件：由第三方实现的插件，可选。遵循 Deno 的设计，入口为一个 url，如：<code>https://github.com/xcatliu/pagic_plugin_example/blob/master/mod.ts</code></li>\n</ol>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>plugins</code></td>\n<td><code>string[]</code></td>\n<td><code>[\'clean\', \'init\', \'md\', \'tsx\', \'script\', \'layout\', \'out\']</code></td>\n<td>插件列表，内置插件和官方插件的取值均为插件名，第三方插件的取值为其入口 url</td>\n</tr>\n</tbody>\n</table></div>\n<p>插件执行的顺序按照其配置顺序，除非该插件在实现时配置了一个 <code>insert</code> 属性：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'customPlugin\'</span><span class="token punctuation">,</span>\n  insert<span class="token operator">:</span> <span class="token string">\'before:script\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// fn 的设计参考了 Deno <a class="token url-link" href="https://deno.land/manual/testing#writing-tests">https://deno.land/manual/testing#writing-tests</a></span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// balabala</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>name</code> 是插件的唯一标识，会被用于 <code>insert</code> 中的插件排序。</p>\n<p><code>insert</code> 的语法是 <code>before:${pluginName}</code> 或 <code>after:${pluginName}</code>。这种方式比其他静态网站生成器中需要注册各种各样的生命周期钩子更方便也更灵活。</p>\n<p><code>fn</code> 是一个函数，仅接受一个参数，<code>pagic</code> 实例，它可以访问到 Pagic 在运行中的所有配置、上下文。如果插件需要一些额外的配置，可以约定在 <code>pagic.config.ts</code> 中新增一条配置项 <code>customPlugin</code>，然后在 <code>fn</code> 中可以通过 <code>pagic.config.customPlugin</code> 获取到配置。</p>\n<p>需要注意的是：</p>\n<ul>\n<li>用户配置的 <code>plugins</code> 会 append 到默认数组中，而不是替换它</li>\n<li>插件在运行时会根据其 <code>insert</code> 排序再运行</li>\n<li>可以使用 <code>-</code> 前缀删除掉某个内置插件，这个特性不常用，只有在以下两种情况下需要使用：\n<ol>\n<li>仅仅将 React 作为一个模版引擎，想构建出不加载 React 的 html 页面时，可以使用 <code>-script</code> 去掉构建 js 脚本的插件，注意此时 React 中的脚本比如 <code>useState</code> 就不会在客户端执行了</li>\n<li>想要自己替换掉一些内置插件，比如使用 <code>-md</code> 去掉解析 markdown 文件的插件，然后再添加一个自定义插件 <code>https://github.com/xcatliu/pagic_plugin_custom_md/blob/master/mod.ts</code> 这样可以修改 Pagic 核心的构建流程，实现更高自由度的个性化</li>\n</ol>\n</li>\n<li>第三方插件一般都需要 <code>insert</code> 属性，不然就会在 <code>write</code> 之后运行了，很少有插件需要在构建完成写入文件后再执行</li>\n</ul>\n<h2 id="%E4%B8%BB%E9%A2%98">主题<a class="anchor" href="#%E4%B8%BB%E9%A2%98">§</a></h2>\n<p>主题是 Pagic 中的核心功能之一，有官方主题和第三方主题两种</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>theme</code></td>\n<td><code>string</code></td>\n<td><code>default</code></td>\n<td>官方主题的取值为主题名，第三方插件的取值为其入口 url</td>\n</tr>\n</tbody>\n</table></div>\n<p>主题的运行机制很容易理解——当运行 <code>pagic build</code> 时，会将主题中的所有文件都「复制」到 <code>srcDir</code> 下，然后按照正常的模式运行 <code>build</code>。</p>\n<p>当然，这个「复制」并不会真的复制文件。而且遇到冲突的文件时，也是以用户的文件为准。</p>\n<p>为什么主题需要一个入口文件呢？</p>\n<p>因为 Deno 的设计中，模块调用是以 url 为基础的，想象一个网址表示一个主题，我们没有办法像 node 一样用 <code>fs.readdir</code> 来找到此主题目录下的所有文件，所以必须有一个入口文件来表示此主题包含了哪些文件：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'assets/index.css\'</span><span class="token punctuation">,</span> <span class="token string">\'assets/reset.css\'</span><span class="token punctuation">,</span> <span class="token string">\'assets/variables.css\'</span><span class="token punctuation">,</span> <span class="token string">\'_layout.tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'favicon.ico\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>其中 <code>files</code> 表示需要被「复制」到 <code>srcDir</code> 下的文件。</p>\n<h2 id="%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE">网站配置<a class="anchor" href="#%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>这里列出一些约定好的配置，它们通常由插件或主题来实现。</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站标题，通常会放到页面的标题后面，如：<code>函数的类型 · TypeScript 入门教程</code>，若该页面不存在页面标题，则只会展示网站标题 <code>TypeScript 入门教程</code></td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站描述，通常会放到 <code>&lt;head&gt;&lt;meta name=&quot;description&quot;&gt;</code> 中展示，也有可能展示在页面中</td>\n</tr>\n<tr>\n<td><code>head</code></td>\n<td><code>ReactElement</code></td>\n<td><code>undefined</code></td>\n<td>额外被注入到 <code>&lt;head&gt;</code> 中的内容，可以写 jsx。注意此时需要将配置文件 <code>pagic.config.tsx</code></td>\n</tr>\n<tr>\n<td><code>sidebar</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>侧边栏</td>\n</tr>\n<tr>\n<td><code>nav</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>顶部导航</td>\n</tr>\n<tr>\n<td><code>github</code></td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>网站的 GitHub 地址，通常会展示在网页的右上角</td>\n</tr>\n<tr>\n<td><code>ga</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>Google Analytics 配置</td>\n</tr>\n<tr>\n<td><code>gitalk</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>Gitalk 配置</td>\n</tr>\n<tr>\n<td><code>tocAd</code></td>\n<td><code>ReactElement</code></td>\n<td><code>undefined</code></td>\n<td>展示在 toc 上方的广告</td>\n</tr>\n<tr>\n<td><code>tools</code></td>\n<td></td>\n<td><code>undefined</code></td>\n<td>一些额外的功能</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">开发环境配置<a class="anchor" href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">§</a></h2>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>watch</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>是否观察 <code>srcDir</code> 目录，有变化后重新构建</td>\n</tr>\n<tr>\n<td><code>serve</code></td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>是否启动一个静态服务</td>\n</tr>\n<tr>\n<td><code>port</code></td>\n<td><code>number</code></td>\n<td><code>8000</code></td>\n<td>静态服务端口号</td>\n</tr>\n</tbody>\n</table></div>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99" }, "\u8BBE\u8BA1\u539F\u5219")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A" }, "\u547D\u540D\u7EA6\u5B9A"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%96%87%E4%BB%B6%E5%90%8D%E7%9B%AE%E5%BD%95%E5%90%8D" }, "\u6587\u4EF6\u540D\u3001\u76EE\u5F55\u540D")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%8F%98%E9%87%8F%E5%90%8D%E5%8F%82%E6%95%B0%E5%90%8D" }, "\u53D8\u91CF\u540D\u3001\u53C2\u6570\u540D")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0" }, "\u914D\u7F6E\u6587\u4EF6\u540D\u79F0")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E9%85%8D%E7%BD%AE" }, "\u6587\u4EF6\u76F8\u5173\u7684\u914D\u7F6E"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#exclude" }, "exclude")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%BA%E6%99%AF%E4%B8%80%E7%BA%AF%E7%BD%91%E7%AB%99%E7%8B%AC%E7%AB%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6" }, "\u573A\u666F\u4E00\uFF1A\u7EAF\u7F51\u7AD9\uFF0C\u72EC\u7ACB\u7684\u76EE\u5F55\u5B58\u653E\u6E90\u6587\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%BA%E6%99%AF%E4%BA%8C%E7%BA%AF%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%AD%98%E6%94%BE%E6%BA%90%E6%96%87%E4%BB%B6" }, "\u573A\u666F\u4E8C\uFF1A\u7EAF\u7F51\u7AD9\uFF0C\u6839\u76EE\u5F55\u5B58\u653E\u6E90\u6587\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%BA%E6%99%AF%E4%B8%89%E9%A1%B9%E7%9B%AE--%E7%BD%91%E7%AB%99" }, "\u573A\u666F\u4E09\uFF1A\u9879\u76EE + \u7F51\u7AD9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%BA%E6%99%AF%E5%9B%9B%E4%BB%85%E5%B1%95%E7%A4%BA-readmemd" }, "\u573A\u666F\u56DB\uFF1A\u4EC5\u5C55\u793A README.md")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8F%92%E4%BB%B6" }, "\u63D2\u4EF6")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%B8%BB%E9%A2%98" }, "\u4E3B\u9898")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE" }, "\u7F51\u7AD9\u914D\u7F6E")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE" }, "\u5F00\u53D1\u73AF\u5883\u914D\u7F6E")))),
    'author': "xcatliu",
    'contributors': [
        "xcatliu"
    ],
    'date': "2020-07-12T00:00:00.000Z",
    'updated': "2020-12-05T13:42:50.000Z",
    'excerpt': "作为一名资深博客爱好者，我热衷于折腾各种博客系统，写过多个博客主题。 终于，写主题也无法得到满足，我开始写博客系统了。 或者说是更广义的，静态网站生成器。 如今 Pagic 已经完成了一个雏形，我也邀请了一些朋友试用，经...",
    'cover': undefined,
    'blog': {
        "isPost": true,
        "posts": [
            {
                "pagePath": "zh-CN/blog/design_pagic_config_ts.md",
                "title": "设计 pagic.config.ts",
                "link": "zh-CN/blog/design_pagic_config_ts.html",
                "date": "2020-07-12T00:00:00.000Z",
                "updated": "2020-12-05T13:42:50.000Z",
                "author": "xcatliu",
                "contributors": [
                    "xcatliu"
                ],
                "excerpt": "作为一名资深博客爱好者，我热衷于折腾各种博客系统，写过多个博客主题。 终于，写主题也无法得到满足，我开始写博客系统了。 或者说是更广义的，静态网站生成器。 如今 Pagic 已经完成了一个雏形，我也邀请了一些朋友试用，经..."
            }
        ],
        "categories": [],
        "tags": []
    }
};
