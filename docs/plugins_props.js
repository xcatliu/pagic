import projectConfig from '/pagic.config.js';
import Ga from '/_ga.js';
var _a, _b;
export default {
    'prev': {
        "text": "Themes",
        "link": "docs/themes.html"
    },
    'next': {
        "text": "Blog",
        "link": "docs/blog.html"
    },
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['en'], branch: 'master' },
    'pagePath': "docs/plugins.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/plugins.html",
    'title': "Plugins",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Plugins</h1>\n<p>This chapter will introduce how to use plugins and how to develop plugins.</p>\n<p>If you want to see a list of all plugins and their documentation, please visit <a href="/plugins/">plugins list</a>.</p>\n<h2 id="how-to-use">How to use<a class="anchor" href="#how-to-use">§</a></h2>\n<p>The plugin is configured in <code>pagic.config.ts</code> through <code>plugins</code>, its type is <code>string[]</code>.</p>\n<p>According to the level of the plugin, plugins can be divided into built-in plugins, official plugins and third-party plugins.</p>\n<h3 id="built-in-plugins">Built-in plugins<a class="anchor" href="#built-in-plugins">§</a></h3>\n<p>Built-in plugins (also called default plugins) are the most important plugins, they make up the entire Pagic build process, in other words, the entire Pagic build process is split into built-in plugins.</p>\n<p>The built-in plugins include <code>[\'clean\',\'init\',\'md\',\'tsx\',\'script\',\'layout\',\'out\']</code>, the construction process of Pagic also follows this order:</p>\n<ol>\n<li><code>clean</code>: Empty the <code>dist</code> directory</li>\n<li><code>init</code>: Initialize intermediate variables (<code>pagePropsMap</code>)</li>\n<li><code>md</code>: Parse the <code>md</code> file and update the intermediate variables</li>\n<li><code>tsx</code>: Parse <code>tsx</code> files and update intermediate variables</li>\n<li><code>script</code>: Compile <code>tsx</code> files to generate <code>pagic.config.js</code>, <code>index.js</code>, <code>*_props.js</code>, <code>*_content.js</code> and other files</li>\n<li><code>layout</code>: Parse the <code>_layout.tsx</code> file and use the <code>Layout</code> component to render</li>\n<li><code>out</code>: Generate HTML files, copy static resources</li>\n</ol>\n<blockquote>\n<p>In fact, there are some steps before step 1: parsing <code>pagic.config.ts</code>, scanning the project directory, finding page files and template files. However, due to some operating mechanisms, they cannot be split into plugins.</p>\n</blockquote>\n<p>The built-in plugin is enabled by default, you don\'t need to add configuration to enable it.</p>\n<p>By configuring items beginning with <code>-</code>, you can delete the default plugins, such as:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'-script\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This configuration will delete the <code>script</code> plugin in the default <code>plugins</code>, so that the generated website does not have the React-related <code>&lt;script&gt;</code> tag, and it also loses the SPA ability when jumping between pages.</p>\n<p>But for very simple websites, such as one-page-website, this configuration is very suitable.</p>\n<p>If you delete the default plugin and then add a third-party plugin, we can even completely change Pagic\'s build process. For example, we can delete the <code>md</code> plugin, and then add a third-party plugin that parses markdown to replace the process of parsing markdown files.</p>\n<h3 id="official-plugins">Official plugins<a class="anchor" href="#official-plugins">§</a></h3>\n<p>In addition to built-in plugins, we also provide some commonly used official plugins, including:</p>\n<ul>\n<li><code>sidebar</code>: Used to parse the <code>sidebar</code> configured in <code>pagic.config.ts</code>, the theme will render sidebar after the parse is completed</li>\n<li><code>prev_next</code>: Will get the link of previous page and the next page according to the configuration of <code>sidebar</code>, the theme will render it to the bottom of the article</li>\n<li><code>ga</code>: Google Analytics plugin, the plugin will generate a <code>ReactElement</code>, the theme will inserted it into the page\'s <code>&lt;head&gt;</code></li>\n<li><code>gitalk</code>: Add comment function to the page, the plugin will generate a <code>ReactElement</code>, the theme will insert it into the bottom of the page</li>\n<li><code>blog</code>: Parse the <code>md/tsx</code> file as a post in the specified directory</li>\n<li><code>i18n</code>: Internationalization plugin, which make the website support multiple languages</li>\n</ul>\n<p>The configuration of these plugins can be viewed in the <a href="./config.html#page-content">Config</a> chapter.</p>\n<p>Official plugins can be added by configuring <code>plugins</code>.</p>\n<p>It should be noted that the user-configured <code>plugins</code> will not replace the default <code>plugins</code>, but will be inserted into the default <code>plugins</code> according to a rule.</p>\n<p>Take <a href="https://github.com/xcatliu/pagic/blob/master/pagic.config.tsx"><code>pagic.org</code> config file</a> as an example:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'sidebar\'</span><span class="token punctuation">,</span> <span class="token string">\'prev_next\'</span><span class="token punctuation">,</span> <span class="token string">\'ga\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The inserted <code>plugins</code> are:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'clean\'</span><span class="token punctuation">,</span> <span class="token string">\'init\'</span><span class="token punctuation">,</span> <span class="token string">\'md\'</span><span class="token punctuation">,</span> <span class="token string">\'tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'sidebar\'</span><span class="token punctuation">,</span> <span class="token string">\'prev_next\'</span><span class="token punctuation">,</span> <span class="token string">\'ga\'</span><span class="token punctuation">,</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span> <span class="token string">\'layout\'</span><span class="token punctuation">,</span> <span class="token string">\'out\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="so-what-is-the-rules">So what is the rules?<a class="anchor" href="#so-what-is-the-rules">§</a></h4>\n<p>It turns out that every <strong>non-built-in</strong> plugin will have an <code>insert</code> attribute, which describes the position when it is inserted, and its value is <code>before:xxx</code> or <code>after:xxx</code>, where <code>xxx</code> is one The name of the plugin. such as:</p>\n<ul>\n<li>The <code>insert</code> attribute of <code>sidebar</code> is <code>after:tsx</code>, so it will be inserted after <code>tsx</code></li>\n<li>The <code>insert</code> attribute of <code>prev_next</code> is <code>after:sidebar</code>, so it will be inserted after <code>sidebar</code></li>\n<li>The <code>insert</code> attribute of <code>ga</code> is <code>before:script</code>, so it will be inserted before <code>script</code></li>\n</ul>\n<p>Thanks to Pagic\'s splitting of the build process into built-in plugins, non-built-in plugins can be flexibly inserted into any position of the build. This design is more flexible and easier to understand than creating some &quot;hook functions&quot;.</p>\n<h3 id="third-party-plugins">Third-party plugins<a class="anchor" href="#third-party-plugins">§</a></h3>\n<p>When using third-party plugins, the items in the array should be an entry file URL:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'<a class="token url-link" href="https://raw.githubusercontent.com/xcatliu/pagic_plugin_custom/master/mod.ts">https://raw.githubusercontent.com/xcatliu/pagic_plugin_custom/master/mod.ts</a>\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="how-to-develop-a-plugin">How to develop a plugin<a class="anchor" href="#how-to-develop-a-plugin">§</a></h2>\n<h3 id="plugin-structure">Plugin structure<a class="anchor" href="#plugin-structure">§</a></h3>\n<p>A plugin must have a default export, the type is as follows:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">PagicPlugin</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  insert<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token operator">:</span> Pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Among them:</p>\n<ul>\n<li><code>name</code> is the name of the plugin. This name will be used when other plugins need to be inserted before or after this plugin</li>\n<li><code>insert</code> is the position where the plugin is inserted, the value is <code>before:xxx</code> or <code>after:xxx</code>, where <code>xxx</code> is a plugin name</li>\n<li>The <code>fn</code> function is the core logic of the plugin, and it accepts a parameter <code>pagic</code>, which is an instance of <code>Pagic</code></li>\n</ul>\n<blockquote>\n<p>This naming rule refers to <a href="https://deno.land/manual/testing">Deno Testing\'s design</a></p>\n</blockquote>\n<h3 id="fn-function"><code>fn</code> function<a class="anchor" href="#fn-function">§</a></h3>\n<p>The <code>fn</code> function is the core logic of the plugin. Since its parameter <code>pagic</code> is the currently running instance of <code>Pagic</code>, it can do almost anything, including but not limited to:</p>\n<ul>\n<li>Get configuration in <code>pagic.config.ts</code></li>\n<li>Get the list of static resources</li>\n<li>Get page list</li>\n<li>Modify the <code>props</code> of the page</li>\n<li>Write files to the <code>dist</code> directory</li>\n<li>Import and run third-party modules</li>\n</ul>\n<p>For example, we can create a plugin that adds a prefix to the <code>title</code> of all pages:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> PagicPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.1/mod.ts">https://deno.land/x/pagic@v1.6.1/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> prependTitle<span class="token operator">:</span> PagicPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'prepend_title\'</span><span class="token punctuation">,</span>\n  insert<span class="token operator">:</span> <span class="token string">\'after:tsx\'</span><span class="token punctuation">,</span>\n<span class="highlighted-line">  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> pagePath <span class="token keyword">of</span> pagic<span class="token punctuation">.</span>pagePaths<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">      <span class="token keyword">const</span> pageProps <span class="token operator">=</span> pagic<span class="token punctuation">.</span>pagePropsMap<span class="token punctuation">[</span>pagePath<span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">      pagic<span class="token punctuation">.</span>pagePropsMap<span class="token punctuation">[</span>pagePath<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">        <span class="token operator">...</span>pageProps<span class="token punctuation">,</span></span><span class="highlighted-line">        title<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Prefix </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageProps<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span><span class="highlighted-line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token punctuation">}</span></span><span class="highlighted-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> prependTitle<span class="token punctuation">;</span>\n</code></pre><p>In the above example,</p>\n<ul>\n<li><code>pagic.pagePaths</code> is the <em>temporary</em><sup><a href="#sup-1">[1]</a></sup> path of all scanned pages</li>\n<li><code>pagic.pagePropsMap</code> is the <code>props</code> of all pages</li>\n</ul>\n<p>We loop through <code>pagic.pagePaths</code> through <code>for of</code>, and re-assign the <code>props</code> of each page, so that we can add a prefix to all pages.</p>\n<p>In addition to these two attributes, <code>pagic</code> has many other attributes. The commonly used <code>pagic</code> attributes are listed below:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>config</code></td>\n<td><code>PagicConfig</code></td>\n<td>Pagic <em>runtime</em><sup><a href="#sup-2">[2]</a></sup> configuration</td>\n</tr>\n<tr>\n<td><code>pagePaths</code></td>\n<td><code>string[]</code></td>\n<td><em>Temporary</em><sup><a href="#sup-1">[1]</a></sup> all scanned page paths</td>\n</tr>\n<tr>\n<td><code>layoutPaths</code></td>\n<td><code>string[]</code></td>\n<td>All scanned templates (including themes)</td>\n</tr>\n<tr>\n<td><code>staticPaths</code></td>\n<td><code>string[]</code></td>\n<td><em>Temporary</em><sup><a href="#sup-1">[1]</a></sup> all scanned static resources (including themes)</td>\n</tr>\n<tr>\n<td><code>pagePropsMap</code></td>\n<td><code>Record&lt;string, any&gt;</code></td>\n<td><code>props</code> for all pages</td>\n</tr>\n<tr>\n<td><code>writeFiles</code></td>\n<td><code>Record&lt;string, string&gt;</code></td>\n<td>Will be written to the <code>dist</code> directory in the <code>out</code> plugin</td>\n</tr>\n<tr>\n<td><code>rebuilding</code></td>\n<td><code>boolean</code></td>\n<td><code>true</code> means rebuilding, <code>false</code> means incremental building</td>\n</tr>\n</tbody>\n</table></div>\n<p>Note that</p>\n<h3 id="reference-official-plugin">Reference official plugin<a class="anchor" href="#reference-official-plugin">§</a></h3>\n<p>The best reference for developing a plugin is the official plugin, you can directly <a href="https://github.com/xcatliu/pagic/tree/master/src/plugins">view the source code of the official plugin</a>.</p>\n<h2 id="annotations">Annotations<a class="anchor" href="#annotations">§</a></h2>\n<ol>\n<li><span id="sup-1"></span> <code>pagePaths</code> and <code>staticPaths</code> are both <em>temporary</em>, that is to say, they only contain incremental during incremental builds (<code>--watch</code> mode)</li>\n<li><span id="sup-2"></span> The <em>runtime</em> configuration of Pagic is slightly different from the configuration in <code>pagic.config.ts</code></li>\n</ol>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-45256157-16" }),
        React.createElement(React.Fragment, { key: ".1" },
            React.createElement(React.Fragment, { key: ".0" },
                React.createElement("script", { src: "/i18n.js", type: "module" })),
            React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" }))),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'language': {
        "code": "en",
        "name": "English",
        "root": "/"
    },
    'contentTitle': React.createElement("h1", { key: "0" }, "Plugins"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>This chapter will introduce how to use plugins and how to develop plugins.</p>\n<p>If you want to see a list of all plugins and their documentation, please visit <a href="/plugins/">plugins list</a>.</p>\n<h2 id="how-to-use">How to use<a class="anchor" href="#how-to-use">§</a></h2>\n<p>The plugin is configured in <code>pagic.config.ts</code> through <code>plugins</code>, its type is <code>string[]</code>.</p>\n<p>According to the level of the plugin, plugins can be divided into built-in plugins, official plugins and third-party plugins.</p>\n<h3 id="built-in-plugins">Built-in plugins<a class="anchor" href="#built-in-plugins">§</a></h3>\n<p>Built-in plugins (also called default plugins) are the most important plugins, they make up the entire Pagic build process, in other words, the entire Pagic build process is split into built-in plugins.</p>\n<p>The built-in plugins include <code>[\'clean\',\'init\',\'md\',\'tsx\',\'script\',\'layout\',\'out\']</code>, the construction process of Pagic also follows this order:</p>\n<ol>\n<li><code>clean</code>: Empty the <code>dist</code> directory</li>\n<li><code>init</code>: Initialize intermediate variables (<code>pagePropsMap</code>)</li>\n<li><code>md</code>: Parse the <code>md</code> file and update the intermediate variables</li>\n<li><code>tsx</code>: Parse <code>tsx</code> files and update intermediate variables</li>\n<li><code>script</code>: Compile <code>tsx</code> files to generate <code>pagic.config.js</code>, <code>index.js</code>, <code>*_props.js</code>, <code>*_content.js</code> and other files</li>\n<li><code>layout</code>: Parse the <code>_layout.tsx</code> file and use the <code>Layout</code> component to render</li>\n<li><code>out</code>: Generate HTML files, copy static resources</li>\n</ol>\n<blockquote>\n<p>In fact, there are some steps before step 1: parsing <code>pagic.config.ts</code>, scanning the project directory, finding page files and template files. However, due to some operating mechanisms, they cannot be split into plugins.</p>\n</blockquote>\n<p>The built-in plugin is enabled by default, you don\'t need to add configuration to enable it.</p>\n<p>By configuring items beginning with <code>-</code>, you can delete the default plugins, such as:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'-script\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>This configuration will delete the <code>script</code> plugin in the default <code>plugins</code>, so that the generated website does not have the React-related <code>&lt;script&gt;</code> tag, and it also loses the SPA ability when jumping between pages.</p>\n<p>But for very simple websites, such as one-page-website, this configuration is very suitable.</p>\n<p>If you delete the default plugin and then add a third-party plugin, we can even completely change Pagic\'s build process. For example, we can delete the <code>md</code> plugin, and then add a third-party plugin that parses markdown to replace the process of parsing markdown files.</p>\n<h3 id="official-plugins">Official plugins<a class="anchor" href="#official-plugins">§</a></h3>\n<p>In addition to built-in plugins, we also provide some commonly used official plugins, including:</p>\n<ul>\n<li><code>sidebar</code>: Used to parse the <code>sidebar</code> configured in <code>pagic.config.ts</code>, the theme will render sidebar after the parse is completed</li>\n<li><code>prev_next</code>: Will get the link of previous page and the next page according to the configuration of <code>sidebar</code>, the theme will render it to the bottom of the article</li>\n<li><code>ga</code>: Google Analytics plugin, the plugin will generate a <code>ReactElement</code>, the theme will inserted it into the page\'s <code>&lt;head&gt;</code></li>\n<li><code>gitalk</code>: Add comment function to the page, the plugin will generate a <code>ReactElement</code>, the theme will insert it into the bottom of the page</li>\n<li><code>blog</code>: Parse the <code>md/tsx</code> file as a post in the specified directory</li>\n<li><code>i18n</code>: Internationalization plugin, which make the website support multiple languages</li>\n</ul>\n<p>The configuration of these plugins can be viewed in the <a href="./config.html#page-content">Config</a> chapter.</p>\n<p>Official plugins can be added by configuring <code>plugins</code>.</p>\n<p>It should be noted that the user-configured <code>plugins</code> will not replace the default <code>plugins</code>, but will be inserted into the default <code>plugins</code> according to a rule.</p>\n<p>Take <a href="https://github.com/xcatliu/pagic/blob/master/pagic.config.tsx"><code>pagic.org</code> config file</a> as an example:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'sidebar\'</span><span class="token punctuation">,</span> <span class="token string">\'prev_next\'</span><span class="token punctuation">,</span> <span class="token string">\'ga\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>The inserted <code>plugins</code> are:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'clean\'</span><span class="token punctuation">,</span> <span class="token string">\'init\'</span><span class="token punctuation">,</span> <span class="token string">\'md\'</span><span class="token punctuation">,</span> <span class="token string">\'tsx\'</span><span class="token punctuation">,</span> <span class="token string">\'sidebar\'</span><span class="token punctuation">,</span> <span class="token string">\'prev_next\'</span><span class="token punctuation">,</span> <span class="token string">\'ga\'</span><span class="token punctuation">,</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span> <span class="token string">\'layout\'</span><span class="token punctuation">,</span> <span class="token string">\'out\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="so-what-is-the-rules">So what is the rules?<a class="anchor" href="#so-what-is-the-rules">§</a></h4>\n<p>It turns out that every <strong>non-built-in</strong> plugin will have an <code>insert</code> attribute, which describes the position when it is inserted, and its value is <code>before:xxx</code> or <code>after:xxx</code>, where <code>xxx</code> is one The name of the plugin. such as:</p>\n<ul>\n<li>The <code>insert</code> attribute of <code>sidebar</code> is <code>after:tsx</code>, so it will be inserted after <code>tsx</code></li>\n<li>The <code>insert</code> attribute of <code>prev_next</code> is <code>after:sidebar</code>, so it will be inserted after <code>sidebar</code></li>\n<li>The <code>insert</code> attribute of <code>ga</code> is <code>before:script</code>, so it will be inserted before <code>script</code></li>\n</ul>\n<p>Thanks to Pagic\'s splitting of the build process into built-in plugins, non-built-in plugins can be flexibly inserted into any position of the build. This design is more flexible and easier to understand than creating some &quot;hook functions&quot;.</p>\n<h3 id="third-party-plugins">Third-party plugins<a class="anchor" href="#third-party-plugins">§</a></h3>\n<p>When using third-party plugins, the items in the array should be an entry file URL:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'<a class="token url-link" href="https://raw.githubusercontent.com/xcatliu/pagic_plugin_custom/master/mod.ts">https://raw.githubusercontent.com/xcatliu/pagic_plugin_custom/master/mod.ts</a>\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="how-to-develop-a-plugin">How to develop a plugin<a class="anchor" href="#how-to-develop-a-plugin">§</a></h2>\n<h3 id="plugin-structure">Plugin structure<a class="anchor" href="#plugin-structure">§</a></h3>\n<p>A plugin must have a default export, the type is as follows:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">PagicPlugin</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  insert<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token operator">:</span> Pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Among them:</p>\n<ul>\n<li><code>name</code> is the name of the plugin. This name will be used when other plugins need to be inserted before or after this plugin</li>\n<li><code>insert</code> is the position where the plugin is inserted, the value is <code>before:xxx</code> or <code>after:xxx</code>, where <code>xxx</code> is a plugin name</li>\n<li>The <code>fn</code> function is the core logic of the plugin, and it accepts a parameter <code>pagic</code>, which is an instance of <code>Pagic</code></li>\n</ul>\n<blockquote>\n<p>This naming rule refers to <a href="https://deno.land/manual/testing">Deno Testing\'s design</a></p>\n</blockquote>\n<h3 id="fn-function"><code>fn</code> function<a class="anchor" href="#fn-function">§</a></h3>\n<p>The <code>fn</code> function is the core logic of the plugin. Since its parameter <code>pagic</code> is the currently running instance of <code>Pagic</code>, it can do almost anything, including but not limited to:</p>\n<ul>\n<li>Get configuration in <code>pagic.config.ts</code></li>\n<li>Get the list of static resources</li>\n<li>Get page list</li>\n<li>Modify the <code>props</code> of the page</li>\n<li>Write files to the <code>dist</code> directory</li>\n<li>Import and run third-party modules</li>\n</ul>\n<p>For example, we can create a plugin that adds a prefix to the <code>title</code> of all pages:</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> PagicPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.1/mod.ts">https://deno.land/x/pagic@v1.6.1/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> prependTitle<span class="token operator">:</span> PagicPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'prepend_title\'</span><span class="token punctuation">,</span>\n  insert<span class="token operator">:</span> <span class="token string">\'after:tsx\'</span><span class="token punctuation">,</span>\n<span class="highlighted-line">  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>pagic<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> pagePath <span class="token keyword">of</span> pagic<span class="token punctuation">.</span>pagePaths<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">      <span class="token keyword">const</span> pageProps <span class="token operator">=</span> pagic<span class="token punctuation">.</span>pagePropsMap<span class="token punctuation">[</span>pagePath<span class="token punctuation">]</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">      pagic<span class="token punctuation">.</span>pagePropsMap<span class="token punctuation">[</span>pagePath<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">        <span class="token operator">...</span>pageProps<span class="token punctuation">,</span></span><span class="highlighted-line">        title<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Prefix </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageProps<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></span><span class="highlighted-line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token punctuation">}</span></span><span class="highlighted-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> prependTitle<span class="token punctuation">;</span>\n</code></pre><p>In the above example,</p>\n<ul>\n<li><code>pagic.pagePaths</code> is the <em>temporary</em><sup><a href="#sup-1">[1]</a></sup> path of all scanned pages</li>\n<li><code>pagic.pagePropsMap</code> is the <code>props</code> of all pages</li>\n</ul>\n<p>We loop through <code>pagic.pagePaths</code> through <code>for of</code>, and re-assign the <code>props</code> of each page, so that we can add a prefix to all pages.</p>\n<p>In addition to these two attributes, <code>pagic</code> has many other attributes. The commonly used <code>pagic</code> attributes are listed below:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>config</code></td>\n<td><code>PagicConfig</code></td>\n<td>Pagic <em>runtime</em><sup><a href="#sup-2">[2]</a></sup> configuration</td>\n</tr>\n<tr>\n<td><code>pagePaths</code></td>\n<td><code>string[]</code></td>\n<td><em>Temporary</em><sup><a href="#sup-1">[1]</a></sup> all scanned page paths</td>\n</tr>\n<tr>\n<td><code>layoutPaths</code></td>\n<td><code>string[]</code></td>\n<td>All scanned templates (including themes)</td>\n</tr>\n<tr>\n<td><code>staticPaths</code></td>\n<td><code>string[]</code></td>\n<td><em>Temporary</em><sup><a href="#sup-1">[1]</a></sup> all scanned static resources (including themes)</td>\n</tr>\n<tr>\n<td><code>pagePropsMap</code></td>\n<td><code>Record&lt;string, any&gt;</code></td>\n<td><code>props</code> for all pages</td>\n</tr>\n<tr>\n<td><code>writeFiles</code></td>\n<td><code>Record&lt;string, string&gt;</code></td>\n<td>Will be written to the <code>dist</code> directory in the <code>out</code> plugin</td>\n</tr>\n<tr>\n<td><code>rebuilding</code></td>\n<td><code>boolean</code></td>\n<td><code>true</code> means rebuilding, <code>false</code> means incremental building</td>\n</tr>\n</tbody>\n</table></div>\n<p>Note that</p>\n<h3 id="reference-official-plugin">Reference official plugin<a class="anchor" href="#reference-official-plugin">§</a></h3>\n<p>The best reference for developing a plugin is the official plugin, you can directly <a href="https://github.com/xcatliu/pagic/tree/master/src/plugins">view the source code of the official plugin</a>.</p>\n<h2 id="annotations">Annotations<a class="anchor" href="#annotations">§</a></h2>\n<ol>\n<li><span id="sup-1"></span> <code>pagePaths</code> and <code>staticPaths</code> are both <em>temporary</em>, that is to say, they only contain incremental during incremental builds (<code>--watch</code> mode)</li>\n<li><span id="sup-2"></span> The <em>runtime</em> configuration of Pagic is slightly different from the configuration in <code>pagic.config.ts</code></li>\n</ol>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#how-to-use" }, "How to use"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#built-in-plugins" }, "Built-in plugins")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#official-plugins" }, "Official plugins"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#third-party-plugins" }, "Third-party plugins")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#how-to-develop-a-plugin" }, "How to develop a plugin"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#plugin-structure" }, "Plugin structure")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#fn-function" }, "fn function")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#reference-official-plugin" }, "Reference official plugin")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#annotations" }, "Annotations")))),
    'author': "xcatliu",
    'contributors': [
        "xcatliu"
    ],
    'date': "2020-07-19T14:12:09.000Z",
    'updated': "2023-03-03T07:28:55.000Z",
    'excerpt': "This chapter will introduce how to use plugins and how to develop plugins. If you want to see a list of all plugins and their documentation, please visit plugins list. How to use The plugin is configured in pag...",
    'cover': undefined,
    'blog': {
        "isPost": false,
        "posts": [
            {
                "pagePath": "blog/design_pagic_config_ts.md",
                "title": "Design pagic.config.ts",
                "link": "blog/design_pagic_config_ts.html",
                "date": "2020-07-12T00:00:00.000Z",
                "updated": "2020-12-05T13:42:50.000Z",
                "author": "xcatliu",
                "contributors": [
                    "xcatliu"
                ],
                "excerpt": "As a senior blogger, I am passionate about to develop blog systems and have written many blog themes. Finally, I couldn't be satisfied with writing themes, and I started writing a blog system. Or in a more gene..."
            }
        ],
        "categories": [],
        "tags": []
    },
    'sidebar': [
        {
            "text": "Introduction",
            "link": "docs/introduction.html",
            "pagePath": "docs/introduction.md"
        },
        {
            "text": "Usage",
            "link": "docs/usage.html",
            "pagePath": "docs/usage.md"
        },
        {
            "text": "Config",
            "link": "docs/config.html",
            "pagePath": "docs/config.md"
        },
        {
            "text": "Content",
            "link": "docs/content.html",
            "pagePath": "docs/content.md"
        },
        {
            "text": "_layout.tsx",
            "link": "docs/layout.html",
            "pagePath": "docs/layout.md"
        },
        {
            "text": "Themes",
            "link": "docs/themes.html",
            "pagePath": "docs/themes.md"
        },
        {
            "text": "Plugins",
            "link": "docs/plugins.html",
            "pagePath": "docs/plugins.md"
        },
        {
            "text": "Blog",
            "link": "docs/blog.html",
            "pagePath": "docs/blog.md"
        },
        {
            "text": "Internationalization",
            "link": "docs/i18n.html",
            "pagePath": "docs/i18n.md"
        },
        {
            "text": "Deployment",
            "link": "docs/deployment.html",
            "pagePath": "docs/deployment.md"
        },
        {
            "text": "Demos",
            "link": "docs/demos.html",
            "pagePath": "docs/demos.md"
        },
        {
            "text": "Limitations",
            "link": "docs/limitations.html",
            "pagePath": "docs/limitations.md"
        }
    ]
};
