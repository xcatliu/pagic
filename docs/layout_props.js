import projectConfig from '/pagic.config.js';
import Ga from '/_ga.js';
var _a, _b;
export default {
    'prev': {
        "text": "Content",
        "link": "docs/content.html"
    },
    'next': {
        "text": "Themes",
        "link": "docs/themes.html"
    },
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['en'], branch: 'master' },
    'pagePath': "docs/layout.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/layout.html",
    'title': "_layout.tsx",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1><code>_layout.tsx</code></h1>\n<blockquote>\n<p>The content starting from this chapter is for users who need deep customization. If you simply use Pagic, you can skip directly to the <a href="./blog.html">Blog</a> chapter.</p>\n</blockquote>\n<p><code>_layout.tsx</code> is one of Pagic\'s core concepts.</p>\n<h2 id="what-is-_layouttsx">What is <code>_layout.tsx</code><a class="anchor" href="#what-is-_layouttsx">§</a></h2>\n<p><code>_layout.tsx</code> can be understood as Pagic\'s template file when rendering the page. All page files (<code>md/tsx</code>) will use <code>_layout.tsx</code> as the template when rendering.</p>\n<p>We might as well create a <code>_layout.tsx</code> in the previous <code>site</code> project:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n<span class="highlighted-line">├── _layout<span class="token punctuation">.</span>tsx</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n└── README<span class="token punctuation">.</span>md\n</code></pre><p>The content of <code>_layout.tsx</code> is as follows:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span><span class="token punctuation">,</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.3/mod.ts">https://deno.land/x/pagic@v1.6.3/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function">PagicLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Custom _layout.tsx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Next we run:</p>\n<pre class="language-bash"><code class="language-bash">pagic build --serve\n</code></pre>\n<p>Then open <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>, you can see that in addition to the title <code>Hello world</code>, there is also a paragraph <code>Custom _layout.tsx</code>, which shows that this page uses <code>_layout.tsx</code> rendered as a template.</p>\n<p>Why can we build a page without <code>_layout.tsx</code> in the previous chapter?</p>\n<p>That\'s because Pagic will use the <code>_layout.tsx</code> file in the default theme as a template by default. When we create our own <code>_layout.tsx</code>, it will overwrite the <code>_layout.tsx</code> in the theme.</p>\n<h2 id="sub-pages-and-sub-templates">Sub-pages and sub-templates<a class="anchor" href="#sub-pages-and-sub-templates">§</a></h2>\n<p>The design of <code>_layout.tsx</code> is intuitive. When we create a subdirectory, the pages in it will give priority to the use of <code>_layout.tsx</code> in that directory. Only when there is no <code>_layout.tsx</code> in the subdirectory, will the page look in the upper-level directory until you find <code>_layout.tsx</code>:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n|   |── index<span class="token punctuation">.</span>html\n|   └── foo\n|       ├── index<span class="token punctuation">.</span>html\n|       └── bar\n|           └── index<span class="token punctuation">.</span>html\n<span class="highlighted-line">├── _layout<span class="token punctuation">.</span>tsx</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n|── README<span class="token punctuation">.</span>md\n└── foo\n    ├── README<span class="token punctuation">.</span>md\n    └── bar\n<span class="highlighted-line">        ├── _layout<span class="token punctuation">.</span>tsx</span>        └── README<span class="token punctuation">.</span>md\n</code></pre><p>In the above example, <code>site/foo/bar/README.md</code> will use <code>site/foo/bar/_layout.tsx</code> in the same directory as the template, and <code>site/foo/README.md</code> will Use <code>site/_layout.tsx</code> as a template.</p>\n<blockquote>\n<p>By configuring the frontMatter of page, you can skip this rule and force a template to be specified.</p>\n</blockquote>\n<h2 id="componentization">Componentization<a class="anchor" href="#componentization">§</a></h2>\n<p>Componentization is one of the important features of React. We can reuse code by splitting <code>_layout.tsx</code> into sub-components. However, in Pagic, due to the need to support rendering of <code>tsx</code> files as pages, we need to make a convention for sub-components, that is, starting with <code>_</code> are sub-components:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n|   └── hello<span class="token punctuation">.</span>html\n├── _layout<span class="token punctuation">.</span>tsx\n<span class="highlighted-line">├── _sidebar<span class="token punctuation">.</span>tsx</span>├── hello<span class="token punctuation">.</span>tsx\n└── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n</code></pre><p>In the above example, <code>hello.tsx</code> will be constructed as <code>dist/hello.html</code>, and <code>_sidebar.tsx</code> will not be constructed as a page because it starts with <code>_</code>. In this way, you can split the <code>Sidebar</code> component into the <code>_sidebar.tsx</code> file, and then import it in <code>_layout.tsx</code>:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span><span class="token punctuation">,</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.3/mod.ts">https://deno.land/x/pagic@v1.6.3/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Sidebar</span></span> <span class="token keyword">from</span> <span class="token string">\'./_sidebar.tsx\'</span><span class="token punctuation">;</span></span>\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function">PagicLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Sidebar</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre><h2 id="props"><code>props</code><a class="anchor" href="#props">§</a></h2>\n<p>Note that in the above example, we used the <code>title</code> and <code>content</code> in <code>props</code>, so besides these two, what other <code>props</code> can be used?</p>\n<p>Please refer to the following table:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td><code>string</code></td>\n<td>The title of the page, usually put in <code>&lt;head&gt;&lt;title&gt;</code></td>\n</tr>\n<tr>\n<td><code>content</code></td>\n<td><code>string</code></td>\n<td>The content of the page, usually put in <code>&lt;body&gt;</code></td>\n</tr>\n<tr>\n<td><code>contentTitle</code></td>\n<td><code>ReactElement</code></td>\n<td>The title of <code>content</code>, can be used with <code>contentBody</code> to insert content between title and body</td>\n</tr>\n<tr>\n<td><code>contentBody</code></td>\n<td><code>ReactElement</code></td>\n<td>The body of <code>content</code>, can be used with <code>contentTitle</code> to insert content between title and body</td>\n</tr>\n<tr>\n<td><code>toc</code></td>\n<td><code>ReactElement</code></td>\n<td>Table of content</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td><code>string</code></td>\n<td>The first committer of the file</td>\n</tr>\n<tr>\n<td><code>contributors</code></td>\n<td><code>string[]</code></td>\n<td>All submitters of the file (including the first submitter), sorted by the time of the first submission (first submitted first)</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td><code>Date</code></td>\n<td>The date when the file was first submitted</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>Date</code></td>\n<td>The date when the file was last submitted</td>\n</tr>\n<tr>\n<td><code>excerpt</code></td>\n<td><code>string</code></td>\n<td>The excerpt of article, default to the first 210 characters of the content</td>\n</tr>\n<tr>\n<td><code>cover</code></td>\n<td><code>string</code></td>\n<td>The cover of article (first image of content)</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td><code>string[]</code></td>\n<td>The tags of the article</td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td><code>string[]</code></td>\n<td>The categories of the article</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td><code>PagicConfig</code></td>\n<td>Pagic <em>runtime</em><sup><a href="#sup-1">[1]</a></sup> configuration</td>\n</tr>\n<tr>\n<td><code>pagePath</code></td>\n<td><code>string</code></td>\n<td>Page path, such as <code>docs/README.md</code></td>\n</tr>\n<tr>\n<td><code>layoutPath</code></td>\n<td><code>string</code></td>\n<td>The template path of the page, such as <code>docs/_layout.tsx</code></td>\n</tr>\n<tr>\n<td><code>outputPath</code></td>\n<td><code>string</code></td>\n<td>The output path of the page, such as <code>docs/index.html</code></td>\n</tr>\n<tr>\n<td><code>head</code></td>\n<td><code>ReactElement</code></td>\n<td>The content that needs to be inserted into <code>&lt;head&gt;</code></td>\n</tr>\n<tr>\n<td><code>script</code></td>\n<td><code>ReactElement</code></td>\n<td><code>ReactElement</code> generated by the <code>script</code> plugin</td>\n</tr>\n<tr>\n<td><code>loading</code></td>\n<td><code>boolean</code></td>\n<td>Whether the page loading</td>\n</tr>\n<tr>\n<td><code>sidebar</code></td>\n<td><code>PagePropsSidebar</code></td>\n<td>An object generated by the <code>sidebar</code> plugin</td>\n</tr>\n<tr>\n<td><code>prev</code></td>\n<td><code>PagePropsSidebar[0]</code></td>\n<td>Details of the previous page</td>\n</tr>\n<tr>\n<td><code>next</code></td>\n<td><code>PagePropsSidebar[0]</code></td>\n<td>Details of the next page</td>\n</tr>\n<tr>\n<td><code>gitalk</code></td>\n<td><code>ReactElement</code></td>\n<td><code>ReactElement</code> generated by the <code>gitalk</code> plugin</td>\n</tr>\n<tr>\n<td><code>blog</code></td>\n<td>Checkout <a href="./blog.html#props">Blog</a></td>\n<td>Blog information of the current page</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>Checkout <a href="./i18n.html#props">Internationalization</a></td>\n<td>Language of the current page</td>\n</tr>\n<tr>\n<td>Others</td>\n<td><code>any</code></td>\n<td>Third-party plugins may also expand <code>props</code></td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="static-resources">Static resources<a class="anchor" href="#static-resources">§</a></h2>\n<p>Except for the special files mentioned above, other files will be regarded as static resources and copied directly to the <code>dist</code> directory.</p>\n<p>All file name conventions are summarized as follows:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>File name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start with <code>.</code></td>\n<td>Hidden files, will be ignored</td>\n</tr>\n<tr>\n<td><code>pagic.config.ts</code> or <code>pagic.config.tsx</code></td>\n<td>Config file</td>\n</tr>\n<tr>\n<td><code>_layout.tsx</code></td>\n<td>Template file</td>\n</tr>\n<tr>\n<td><code>tsx</code> file starting with <code>_</code></td>\n<td>Subcomponent</td>\n</tr>\n<tr>\n<td>file ends with <code>md</code> or <code>tsx</code></td>\n<td>Page file</td>\n</tr>\n<tr>\n<td>Other files</td>\n<td>Static resources will be copied directly to the <code>dist</code> directory</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="annotations">Annotations<a class="anchor" href="#annotations">§</a></h2>\n<ol>\n<li><span id="sup-1"></span> The <em>runtime</em> configuration of Pagic is slightly different from the configuration in <code>pagic.config.ts</code></li>\n</ol>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-45256157-16" }),
        React.createElement(React.Fragment, { key: ".1" },
            React.createElement(React.Fragment, { key: ".0" },
                React.createElement("script", { src: "/i18n.js", type: "module" })),
            React.createElement("link", { crossOrigin: "anonymous", href: "https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css", integrity: "sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X", rel: "stylesheet" }))),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'language': {
        "code": "en",
        "name": "English",
        "root": "/"
    },
    'contentTitle': React.createElement("h1", { key: "0" },
        React.createElement("code", null, "_layout.tsx")),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>The content starting from this chapter is for users who need deep customization. If you simply use Pagic, you can skip directly to the <a href="./blog.html">Blog</a> chapter.</p>\n</blockquote>\n<p><code>_layout.tsx</code> is one of Pagic\'s core concepts.</p>\n<h2 id="what-is-_layouttsx">What is <code>_layout.tsx</code><a class="anchor" href="#what-is-_layouttsx">§</a></h2>\n<p><code>_layout.tsx</code> can be understood as Pagic\'s template file when rendering the page. All page files (<code>md/tsx</code>) will use <code>_layout.tsx</code> as the template when rendering.</p>\n<p>We might as well create a <code>_layout.tsx</code> in the previous <code>site</code> project:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n<span class="highlighted-line">├── _layout<span class="token punctuation">.</span>tsx</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n└── README<span class="token punctuation">.</span>md\n</code></pre><p>The content of <code>_layout.tsx</code> is as follows:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span><span class="token punctuation">,</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.3/mod.ts">https://deno.land/x/pagic@v1.6.3/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function">PagicLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Custom _layout.tsx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Next we run:</p>\n<pre class="language-bash"><code class="language-bash">pagic build --serve\n</code></pre>\n<p>Then open <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>, you can see that in addition to the title <code>Hello world</code>, there is also a paragraph <code>Custom _layout.tsx</code>, which shows that this page uses <code>_layout.tsx</code> rendered as a template.</p>\n<p>Why can we build a page without <code>_layout.tsx</code> in the previous chapter?</p>\n<p>That\'s because Pagic will use the <code>_layout.tsx</code> file in the default theme as a template by default. When we create our own <code>_layout.tsx</code>, it will overwrite the <code>_layout.tsx</code> in the theme.</p>\n<h2 id="sub-pages-and-sub-templates">Sub-pages and sub-templates<a class="anchor" href="#sub-pages-and-sub-templates">§</a></h2>\n<p>The design of <code>_layout.tsx</code> is intuitive. When we create a subdirectory, the pages in it will give priority to the use of <code>_layout.tsx</code> in that directory. Only when there is no <code>_layout.tsx</code> in the subdirectory, will the page look in the upper-level directory until you find <code>_layout.tsx</code>:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n|   |── index<span class="token punctuation">.</span>html\n|   └── foo\n|       ├── index<span class="token punctuation">.</span>html\n|       └── bar\n|           └── index<span class="token punctuation">.</span>html\n<span class="highlighted-line">├── _layout<span class="token punctuation">.</span>tsx</span>├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n|── README<span class="token punctuation">.</span>md\n└── foo\n    ├── README<span class="token punctuation">.</span>md\n    └── bar\n<span class="highlighted-line">        ├── _layout<span class="token punctuation">.</span>tsx</span>        └── README<span class="token punctuation">.</span>md\n</code></pre><p>In the above example, <code>site/foo/bar/README.md</code> will use <code>site/foo/bar/_layout.tsx</code> in the same directory as the template, and <code>site/foo/README.md</code> will Use <code>site/_layout.tsx</code> as a template.</p>\n<blockquote>\n<p>By configuring the frontMatter of page, you can skip this rule and force a template to be specified.</p>\n</blockquote>\n<h2 id="componentization">Componentization<a class="anchor" href="#componentization">§</a></h2>\n<p>Componentization is one of the important features of React. We can reuse code by splitting <code>_layout.tsx</code> into sub-components. However, in Pagic, due to the need to support rendering of <code>tsx</code> files as pages, we need to make a convention for sub-components, that is, starting with <code>_</code> are sub-components:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n|   └── hello<span class="token punctuation">.</span>html\n├── _layout<span class="token punctuation">.</span>tsx\n<span class="highlighted-line">├── _sidebar<span class="token punctuation">.</span>tsx</span>├── hello<span class="token punctuation">.</span>tsx\n└── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n</code></pre><p>In the above example, <code>hello.tsx</code> will be constructed as <code>dist/hello.html</code>, and <code>_sidebar.tsx</code> will not be constructed as a page because it starts with <code>_</code>. In this way, you can split the <code>Sidebar</code> component into the <code>_sidebar.tsx</code> file, and then import it in <code>_layout.tsx</code>:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span><span class="token punctuation">,</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v1.6.3/mod.ts">https://deno.land/x/pagic@v1.6.3/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Sidebar</span></span> <span class="token keyword">from</span> <span class="token string">\'./_sidebar.tsx\'</span><span class="token punctuation">;</span></span>\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function">PagicLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Sidebar</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre><h2 id="props"><code>props</code><a class="anchor" href="#props">§</a></h2>\n<p>Note that in the above example, we used the <code>title</code> and <code>content</code> in <code>props</code>, so besides these two, what other <code>props</code> can be used?</p>\n<p>Please refer to the following table:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>title</code></td>\n<td><code>string</code></td>\n<td>The title of the page, usually put in <code>&lt;head&gt;&lt;title&gt;</code></td>\n</tr>\n<tr>\n<td><code>content</code></td>\n<td><code>string</code></td>\n<td>The content of the page, usually put in <code>&lt;body&gt;</code></td>\n</tr>\n<tr>\n<td><code>contentTitle</code></td>\n<td><code>ReactElement</code></td>\n<td>The title of <code>content</code>, can be used with <code>contentBody</code> to insert content between title and body</td>\n</tr>\n<tr>\n<td><code>contentBody</code></td>\n<td><code>ReactElement</code></td>\n<td>The body of <code>content</code>, can be used with <code>contentTitle</code> to insert content between title and body</td>\n</tr>\n<tr>\n<td><code>toc</code></td>\n<td><code>ReactElement</code></td>\n<td>Table of content</td>\n</tr>\n<tr>\n<td><code>author</code></td>\n<td><code>string</code></td>\n<td>The first committer of the file</td>\n</tr>\n<tr>\n<td><code>contributors</code></td>\n<td><code>string[]</code></td>\n<td>All submitters of the file (including the first submitter), sorted by the time of the first submission (first submitted first)</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td><code>Date</code></td>\n<td>The date when the file was first submitted</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td><code>Date</code></td>\n<td>The date when the file was last submitted</td>\n</tr>\n<tr>\n<td><code>excerpt</code></td>\n<td><code>string</code></td>\n<td>The excerpt of article, default to the first 210 characters of the content</td>\n</tr>\n<tr>\n<td><code>cover</code></td>\n<td><code>string</code></td>\n<td>The cover of article (first image of content)</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td><code>string[]</code></td>\n<td>The tags of the article</td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td><code>string[]</code></td>\n<td>The categories of the article</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td><code>PagicConfig</code></td>\n<td>Pagic <em>runtime</em><sup><a href="#sup-1">[1]</a></sup> configuration</td>\n</tr>\n<tr>\n<td><code>pagePath</code></td>\n<td><code>string</code></td>\n<td>Page path, such as <code>docs/README.md</code></td>\n</tr>\n<tr>\n<td><code>layoutPath</code></td>\n<td><code>string</code></td>\n<td>The template path of the page, such as <code>docs/_layout.tsx</code></td>\n</tr>\n<tr>\n<td><code>outputPath</code></td>\n<td><code>string</code></td>\n<td>The output path of the page, such as <code>docs/index.html</code></td>\n</tr>\n<tr>\n<td><code>head</code></td>\n<td><code>ReactElement</code></td>\n<td>The content that needs to be inserted into <code>&lt;head&gt;</code></td>\n</tr>\n<tr>\n<td><code>script</code></td>\n<td><code>ReactElement</code></td>\n<td><code>ReactElement</code> generated by the <code>script</code> plugin</td>\n</tr>\n<tr>\n<td><code>loading</code></td>\n<td><code>boolean</code></td>\n<td>Whether the page loading</td>\n</tr>\n<tr>\n<td><code>sidebar</code></td>\n<td><code>PagePropsSidebar</code></td>\n<td>An object generated by the <code>sidebar</code> plugin</td>\n</tr>\n<tr>\n<td><code>prev</code></td>\n<td><code>PagePropsSidebar[0]</code></td>\n<td>Details of the previous page</td>\n</tr>\n<tr>\n<td><code>next</code></td>\n<td><code>PagePropsSidebar[0]</code></td>\n<td>Details of the next page</td>\n</tr>\n<tr>\n<td><code>gitalk</code></td>\n<td><code>ReactElement</code></td>\n<td><code>ReactElement</code> generated by the <code>gitalk</code> plugin</td>\n</tr>\n<tr>\n<td><code>blog</code></td>\n<td>Checkout <a href="./blog.html#props">Blog</a></td>\n<td>Blog information of the current page</td>\n</tr>\n<tr>\n<td><code>language</code></td>\n<td>Checkout <a href="./i18n.html#props">Internationalization</a></td>\n<td>Language of the current page</td>\n</tr>\n<tr>\n<td>Others</td>\n<td><code>any</code></td>\n<td>Third-party plugins may also expand <code>props</code></td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="static-resources">Static resources<a class="anchor" href="#static-resources">§</a></h2>\n<p>Except for the special files mentioned above, other files will be regarded as static resources and copied directly to the <code>dist</code> directory.</p>\n<p>All file name conventions are summarized as follows:</p>\n<div class="table_wrapper"><table>\n<thead>\n<tr>\n<th>File name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Start with <code>.</code></td>\n<td>Hidden files, will be ignored</td>\n</tr>\n<tr>\n<td><code>pagic.config.ts</code> or <code>pagic.config.tsx</code></td>\n<td>Config file</td>\n</tr>\n<tr>\n<td><code>_layout.tsx</code></td>\n<td>Template file</td>\n</tr>\n<tr>\n<td><code>tsx</code> file starting with <code>_</code></td>\n<td>Subcomponent</td>\n</tr>\n<tr>\n<td>file ends with <code>md</code> or <code>tsx</code></td>\n<td>Page file</td>\n</tr>\n<tr>\n<td>Other files</td>\n<td>Static resources will be copied directly to the <code>dist</code> directory</td>\n</tr>\n</tbody>\n</table></div>\n<h2 id="annotations">Annotations<a class="anchor" href="#annotations">§</a></h2>\n<ol>\n<li><span id="sup-1"></span> The <em>runtime</em> configuration of Pagic is slightly different from the configuration in <code>pagic.config.ts</code></li>\n</ol>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#what-is-_layouttsx" }, "What is _layout.tsx")),
            React.createElement("li", null,
                React.createElement("a", { href: "#sub-pages-and-sub-templates" }, "Sub-pages and sub-templates")),
            React.createElement("li", null,
                React.createElement("a", { href: "#componentization" }, "Componentization")),
            React.createElement("li", null,
                React.createElement("a", { href: "#props" }, "props")),
            React.createElement("li", null,
                React.createElement("a", { href: "#static-resources" }, "Static resources")),
            React.createElement("li", null,
                React.createElement("a", { href: "#annotations" }, "Annotations")))),
    'author': "xcatliu",
    'contributors': [
        "xcatliu"
    ],
    'date': "2020-08-10T04:25:19.000Z",
    'updated': "2023-06-06T08:08:54.000Z",
    'excerpt': "_layout.tsx is one of Pagic's core concepts. What is _layout.tsx _layout.tsx can be understood as Pagic's template file when rendering the page. All page files (md/tsx) will use _layout.tsx as the template when...",
    'cover': undefined,
    'blog': {
        "isPost": false,
        "posts": [
            {
                "pagePath": "blog/design_pagic_config_ts.md",
                "title": "Design pagic.config.ts",
                "link": "blog/design_pagic_config_ts.html",
                "date": "2020-07-12T00:00:00.000Z",
                "updated": "2020-12-05T13:42:50.000Z",
                "author": "xcatliu",
                "contributors": [
                    "xcatliu"
                ],
                "excerpt": "As a senior blogger, I am passionate about to develop blog systems and have written many blog themes. Finally, I couldn't be satisfied with writing themes, and I started writing a blog system. Or in a more gene..."
            }
        ],
        "categories": [],
        "tags": []
    },
    'sidebar': [
        {
            "text": "Introduction",
            "link": "docs/introduction.html",
            "pagePath": "docs/introduction.md"
        },
        {
            "text": "Usage",
            "link": "docs/usage.html",
            "pagePath": "docs/usage.md"
        },
        {
            "text": "Config",
            "link": "docs/config.html",
            "pagePath": "docs/config.md"
        },
        {
            "text": "Content",
            "link": "docs/content.html",
            "pagePath": "docs/content.md"
        },
        {
            "text": "_layout.tsx",
            "link": "docs/layout.html",
            "pagePath": "docs/layout.md"
        },
        {
            "text": "Themes",
            "link": "docs/themes.html",
            "pagePath": "docs/themes.md"
        },
        {
            "text": "Plugins",
            "link": "docs/plugins.html",
            "pagePath": "docs/plugins.md"
        },
        {
            "text": "Blog",
            "link": "docs/blog.html",
            "pagePath": "docs/blog.md"
        },
        {
            "text": "Internationalization",
            "link": "docs/i18n.html",
            "pagePath": "docs/i18n.md"
        },
        {
            "text": "Deployment",
            "link": "docs/deployment.html",
            "pagePath": "docs/deployment.md"
        },
        {
            "text": "Demos",
            "link": "docs/demos.html",
            "pagePath": "docs/demos.md"
        },
        {
            "text": "Limitations",
            "link": "docs/limitations.html",
            "pagePath": "docs/limitations.md"
        }
    ]
};
